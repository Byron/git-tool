pool:
  name: Hosted Ubuntu 1604

variables:
    "Go.Version": "1.12.6"

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core runtime 2.2.4'
  inputs:
    packageType: runtime
    version: 2.2.4
    
- task: DownloadGitHubRelease@0
  displayName: 'Download GitHub Release'
  inputs:
    connection: GitHub
    userRepository: GitTools/GitVersion
    itemPattern: 'GitVersion-bin-coreclr*.zip'
    downloadPath: tmp/

- task: ExtractFiles@1
  displayName: 'Extract files '
  inputs:
    archiveFilePatterns: 'tmp/*.zip'
    destinationFolder: 'tmp/'
    cleanDestinationFolder: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet GitVersion.dll'
  inputs:
    command: custom
    custom: 'tmp/GitVersion.dll'
    arguments: '/output buildserver'

- task: GoTool@0
  displayName: 'Use Go $(Go.Version)'
  inputs:
    version: "$(Go.Version)"

- script: |
    go version
    go get -v -t -d ./...
    go get github.com/jstemmer/go-junit-report
    go get github.com/axw/gocov/gocov
    go get github.com/AlekSi/gocov-xml
    go get -u gopkg.in/matm/v1/gocov-html

    echo "##vso[task.prependpath]$GOPATH/bin"
    echo "##vso[task.prependpath]$GOROOT/bin"
  displayName: 'Get Go Dependencies'

- script: |
    go test -v -race -coverprofile=coverage.txt -covermode count ./... 2>&1 | go-junit-report > report.xmlgocov convert coverage.txt > coverage.json
    gocov-xml < coverage.json > coverage.xml
    mkdir coverage
    gocov-html < coverage.json > coverage/index.html
  displayName: 'Run Tests'

- task: PublishTestResults@2
  inputs:
    testRunner: JUnit
    testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
    
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura 
    summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage

- task: PowerShell@2
  displayName: 'Build Variants'
  inputs:
    targetType: filePath
    filePath: './ci/build-all.ps1'
    arguments: '-Version $(GitVersion.FullSemVer)'

- task: CopyFiles@2
  displayName: 'Staging Directory copy'
  inputs:
    SourceFolder: bin
    Contents: 'git-tool-*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop/Git-Tool'
  inputs:
    ArtifactName: 'drop/Git-Tool'
